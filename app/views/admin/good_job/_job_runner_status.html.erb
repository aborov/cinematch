<%# Job runner status display %>
<div class="status-box status-<%= @job_runner_status[:status] %>" data-last-updated="<%= Time.now.to_i %>">
  <p><%= @job_runner_status[:message] %></p>
  
  <% if @job_runner_status[:is_job_runner] %>
    <%# Show job runner instance stats %>
    <div class="stats-grid">
      <div class="stat-box">
        <h4>Environment</h4>
        <p><%= Rails.env %></p>
      </div>
      <div class="stat-box">
        <h4>Active Jobs</h4>
        <p><%= @job_runner_status[:active_jobs] %></p>
      </div>
      <div class="stat-box">
        <h4>Queued Jobs</h4>
        <p><%= @job_runner_status[:queued_jobs] %></p>
      </div>
    </div>
    
    <% if @job_runner_status[:recent_errors].present? && @job_runner_status[:recent_errors].any? %>
      <h4>Recent Errors</h4>
      <table class="jobs-table">
        <thead>
          <tr>
            <th>Job</th>
            <th>Error</th>
          </tr>
        </thead>
        <tbody>
          <% @job_runner_status[:recent_errors].each do |job| %>
            <tr>
              <td><%= 
                if job.respond_to?(:job_class)
                  job_display_name(job)
                else
                  job_class = job['job_class'] || job[:job_class]
                  # For non-ActiveRecord job objects, we can't use the full job_display_name method
                  job_class
                end
              %></td>
              <td><%= 
                if job.respond_to?(:error)
                  job.error.to_s.truncate(100)
                else
                  (job['error'] || job[:error]).to_s.truncate(100)
                end
              %></td>
            </tr>
          <% end %>
        </tbody>
      </table>
    <% end %>
    
  <% elsif @job_runner_status[:is_available] %>
    <%# Show available job runner stats %>
    <% if @job_runner_status[:details].present? %>
      <div class="stats-grid">
        <div class="stat-box">
          <h4>Environment</h4>
          <p><%= @job_runner_status[:details]['environment'] || @job_runner_status[:details][:environment] %></p>
        </div>
        <div class="stat-box">
          <h4>Timestamp</h4>
          <% 
            timestamp = @job_runner_status[:details]['timestamp'] || @job_runner_status[:details][:timestamp]
            formatted_timestamp = if timestamp.is_a?(String)
              begin
                Time.parse(timestamp).strftime("%Y-%m-%d %H:%M:%S")
              rescue
                timestamp
              end
            elsif timestamp.respond_to?(:strftime)
              timestamp.strftime("%Y-%m-%d %H:%M:%S")
            else
              timestamp.to_s
            end
          %>
          <p><%= formatted_timestamp %></p>
        </div>
        <div class="stat-box">
          <h4>Good Job Status</h4>
          <p><%= @job_runner_status[:details]['good_job_status'] || @job_runner_status[:details][:good_job_status] %></p>
        </div>
        <% 
          active_jobs = @job_runner_status[:details]['active_jobs'] || @job_runner_status[:details][:active_jobs]
          queued_jobs = @job_runner_status[:details]['queued_jobs'] || @job_runner_status[:details][:queued_jobs]
        %>
        <% if active_jobs.present? %>
          <div class="stat-box">
            <h4>Active Jobs</h4>
            <p><%= active_jobs %></p>
          </div>
          <div class="stat-box">
            <h4>Queued Jobs</h4>
            <p><%= queued_jobs %></p>
          </div>
        <% end %>
      </div>
      
      <% 
        recent_errors = @job_runner_status[:details]['recent_errors'] || @job_runner_status[:details][:recent_errors]
      %>
      <% if recent_errors.present? && recent_errors.any? %>
        <h4>Recent Errors</h4>
        <table class="jobs-table">
          <thead>
            <tr>
              <th>Job</th>
              <th>Error</th>
            </tr>
          </thead>
          <tbody>
            <% recent_errors.each do |error| %>
              <tr>
                <td><%=
                  job_class = error['job_class'] || error[:job_class]
                  if job_class == 'FetchContentJob'
                    # Try to extract operation type from arguments
                    arguments = error['arguments'] || error[:arguments] || []
                    
                    # Handle different argument formats
                    options = if arguments.is_a?(Array) && !arguments.empty?
                      first_arg = arguments.first
                      
                      # Handle the case where the first argument is a string
                      if first_arg.is_a?(String)
                        # Try to parse it as JSON if it looks like a JSON string
                        if first_arg.start_with?('{') && first_arg.end_with?('}')
                          begin
                            JSON.parse(first_arg)
                          rescue
                            # If parsing fails, create a simple hash with the string
                            { 'argument' => first_arg }
                          end
                        else
                          # Not JSON, create a simple hash
                          { 'argument' => first_arg }
                        end
                      else
                        # Use the first argument as is
                        first_arg || {}
                      end
                    else
                      # If arguments is not an array or is empty, use an empty hash
                      {}
                    end
                    
                    # Determine which operation is being performed
                    operation_type = if options['fetch_new'] || (options.is_a?(Hash) && options[:fetch_new])
                      'Fetch New Content'
                    elsif options['update_existing'] || (options.is_a?(Hash) && options[:update_existing])
                      'Update Existing Content'
                    elsif options['fill_missing'] || (options.is_a?(Hash) && options[:fill_missing])
                      'Fill Missing Details'
                    else
                      'Full Content Fetch'
                    end
                    
                    "#{job_class} (#{operation_type})"
                  else
                    job_class
                  end
                %></td>
                <td><%= error['error'] || error[:error] %></td>
              </tr>
            <% end %>
          </tbody>
        </table>
      <% end %>
    <% end %>
    
    <% if @job_runner_status[:details_error].present? %>
      <div class="error-message">
        <p><%= @job_runner_status[:details_error] %></p>
      </div>
    <% end %>
  <% end %>
</div>

<%# Refresh button and auto-update %>
<div class="refresh-controls">
  <button id="refresh-job-runner-status" class="refresh-button">Refresh Status</button>
  <span class="auto-refresh-indicator">Auto-refreshes every 30 seconds</span>
</div> 
