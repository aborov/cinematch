<h2>Edit <%= resource_name.to_s.humanize %></h2>

<%= form_for(resource, as: resource_name, url: registration_path(resource_name), html: { method: :put }) do |f| %>
  <%= render "devise/shared/error_messages", resource: resource %>

  <div class="mb-3">
    <%= f.label :name, class: "form-label" %>
    <%= f.text_field :name, autofocus: true, class: "form-control" %>
  </div>

  <div class="mb-3">
    <%= f.label :email, class: "form-label" %>
    <%= f.email_field :email, class: "form-control" %>
  </div>

  <div class="mb-3">
    <%= f.label :gender, class: "form-label" %><br>
    <div class="btn-group" role="group" aria-label="Gender">
      <%= f.radio_button :gender, 'Male', id: 'gender_male', class: "btn-check" %>
      <%= f.label :gender, 'Male', class: "btn btn-outline-primary", for: 'gender_male' %>

      <%= f.radio_button :gender, 'Female', id: 'gender_female', class: "btn-check" %>
      <%= f.label :gender, 'Female', class: "btn btn-outline-primary", for: 'gender_female' %>

      <%= f.radio_button :gender, 'Non-binary', id: 'gender_non_binary', class: "btn-check" %>
      <%= f.label :gender, 'Non-binary', class: "btn btn-outline-primary", for: 'gender_non_binary' %>

      <%= f.radio_button :gender, 'Prefer not to say', id: 'gender_prefer_not_to_say', class: "btn-check" %>
      <%= f.label :gender, 'Prefer not to say', class: "btn btn-outline-primary", for: 'gender_prefer_not_to_say' %>
    </div>
  </div>

  <div class="mb-3">
    <%= f.label :dob, "Date of Birth", class: "form-label" %>
    <%= f.date_field :dob, start_year: 1900, end_year: Time.now.year, class: "form-control" %>
  </div>

  <div class="mb-3">
    <%= f.label :password, class: "form-label" %>
    <%= f.password_field :password, autocomplete: "new-password", class: "form-control", 
        data: { 
          complexity: { 
            digit: 1, 
            lower: 1, 
            symbol: 1, 
            upper: 1 
          }.to_json 
        } 
    %>
    <div id="passwordFeedback" class="invalid-feedback"></div>
    <small id="passwordHelp" class="form-text text-muted">leave blank if you don't want to change it</small>
  </div>

  <div class="mb-3">
    <%= f.label :password_confirmation, class: "form-label" %><br />
    <%= f.password_field :password_confirmation, autocomplete: "new-password", class: "form-control" %>
  </div>

  <div class="mb-3">
    <%= f.label :current_password, class: "form-label" %><i>(we need your current password to confirm your changes)</i><br />
    <%= f.password_field :current_password, autocomplete: "current-password", class: "form-control" %>
  </div>

  <div>
    <%= f.submit "Update", class: "btn btn-primary" %>
  </div>
<% end %>

<%= link_to "Back", profile_user_path(current_user), class: "btn btn-secondary mt-3" %>

<script>
document.addEventListener('turbo:load', () => {
  const password = document.getElementById('user_password');
  const passwordConfirmation = document.getElementById('user_password_confirmation');
  const passwordFeedback = document.getElementById('passwordFeedback');
  const passwordConfirmationHelp = document.getElementById('passwordConfirmationHelp');

  function validatePasswordComplexity() {
    const complexityRequirements = JSON.parse(password.dataset.complexity);
    const errors = [];

    if (password.value.length < 6) {
      errors.push('Password must be at least 6 characters long');
    }

    if ((password.value.match(/[A-Z]/g) || []).length < complexityRequirements.upper) {
      errors.push('Must contain at least one uppercase letter');
    }

    if ((password.value.match(/[a-z]/g) || []).length < complexityRequirements.lower) {
      errors.push('Must contain at least one lowercase letter');
    }

    if ((password.value.match(/[0-9]/g) || []).length < complexityRequirements.digit) {
      errors.push('Must contain at least one number');
    }

    if ((password.value.match(/[^A-Za-z0-9]/g) || []).length < complexityRequirements.symbol) {
      errors.push('Must contain at least one symbol');
    }

    if (errors.length > 0) {
      passwordFeedback.textContent = errors.join('. ');
      passwordFeedback.style.display = 'block';
      password.classList.add('is-invalid');
    } else {
      passwordFeedback.style.display = 'none';
      password.classList.remove('is-invalid');
      password.classList.add('is-valid');
    }
  }

  function validatePasswordMatch() {
    if (password.value !== passwordConfirmation.value) {
      passwordConfirmationHelp.textContent = 'Passwords do not match';
      passwordConfirmationHelp.style.color = 'red';
      passwordConfirmation.classList.add('is-invalid');
    } else {
      passwordConfirmationHelp.textContent = 'Passwords match';
      passwordConfirmationHelp.style.color = 'green';
      passwordConfirmation.classList.remove('is-invalid');
      passwordConfirmation.classList.add('is-valid');
    }
  }

  if (password && passwordConfirmation) {
    password.addEventListener('input', validatePasswordComplexity);
    password.addEventListener('input', validatePasswordMatch);
    passwordConfirmation.addEventListener('input', validatePasswordMatch);
  }
});
</script>
