<% content_for :title, "Create New Account" %>
<% content_for :h1, "Create New Account" %>
<div class="container">
  <div class="row justify-content-center align-items-center" style="min-height: calc(100vh - 200px);">
    <div class="col-12 col-sm-10 col-md-8 col-lg-6 col-xl-5">
      <div class="card">
        <h3 class="card-header">Sign Up</h3>

        <div class="card-body">
          <%= form_for(resource, as: resource_name, url: registration_path(resource_name)) do |f| %>
            <%= render "devise/shared/error_messages", resource: resource %>

            <div class="mb-3">
              <%= f.label :name, class: "form-label" do %>
                Name <span class="text-danger">*</span>
              <% end %>
              <%= f.text_field :name, autofocus: true, class: "form-control", required: true %>
            </div>

            <div class="mb-3">
              <%= f.label :email, class: "form-label" do %>
                Email <span class="text-danger">*</span>
              <% end %>
              <%= f.email_field :email, class: "form-control", required: true %>
            </div>

            <div class="mb-3">
              <%= f.label :gender, class: "form-label" do %>
                Gender <span class="text-muted small">(optional)</span>
              <% end %><br>
              <div class="btn-group btn-group-sm flex-wrap" role="group" aria-label="Gender">
                <%= f.radio_button :gender, "Male", id: "gender_male", class: "btn-check" %>
                <%= f.label :gender, "Male", class: "btn btn-outline-primary", for: "gender_male" %>

                <%= f.radio_button :gender, "Female", id: "gender_female", class: "btn-check" %>
                <%= f.label :gender, "Female", class: "btn btn-outline-primary", for: "gender_female" %>

                <%= f.radio_button :gender, "Non-binary", id: "gender_non_binary", class: "btn-check" %>
                <%= f.label :gender, "Non-binary", class: "btn btn-outline-primary", for: "gender_non_binary" %>

                <%= f.radio_button :gender, "Prefer not to say", id: "gender_prefer_not_to_say", class: "btn-check" %>
                <%= f.label :gender, "Prefer not to say", class: "btn btn-outline-primary", for: "gender_prefer_not_to_say" %>
              </div>
            </div>

            <div class="mb-3">
              <%= f.label :dob, class: "form-label" do %>
                Date of Birth <span class="text-muted small">(optional)</span>
              <% end %>
              <%= f.date_field :dob, start_year: 1900, end_year: Time.now.year, class: "form-control" %>
            </div>

            <div class="mb-3">
              <%= f.label :password, class: "form-label" do %>
                Password <span class="text-danger">*</span>
              <% end %>
              <%= f.password_field :password, autocomplete: "new-password", class: "form-control",
                                              required: true,
                                              data: {
                                                complexity: {
                                                  digit: 1,
                                                  lower: 1,
                                                  symbol: 1,
                                                  upper: 1,
                                                }.to_json,
                                              } %>
              <div id="passwordFeedback" class="invalid-feedback"></div>
            </div>

            <div class="mb-3">
              <%= f.label :password_confirmation, class: "form-label" do %>
                Password Confirmation <span class="text-danger">*</span>
              <% end %><br />
              <%= f.password_field :password_confirmation, autocomplete: "new-password", class: "form-control", id: "password_confirmation", required: true %>
              <small id="passwordConfirmationHelp" class="form-text text-muted"></small>
            </div>

            <div class="mb-3">
              <p class="text-muted small">
                By signing up, you agree to our <%= link_to "Terms of Service", terms_path, target: "_blank" %> and <%= link_to "Privacy Policy", privacy_path, target: "_blank" %>.
              </p>
            </div>

            <div class="d-flex justify-content-between align-items-center">
              <div>
                <%= f.submit "Sign Up", class: "btn btn-primary" %>
              </div>
              <div class="d-flex align-items-center">
                <%= link_to "Sign In", new_user_session_path, class: "btn btn-outline-primary me-2" %>
                <%= link_to "Restore", restore_account_path, class: "btn btn-outline-secondary" %>
              </div>
            </div>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  document.addEventListener('turbo:load', () => {
    const password = document.getElementById('user_password');
    const passwordConfirmation = document.getElementById('user_password_confirmation');
    const passwordFeedback = document.getElementById('passwordFeedback');
    const passwordConfirmationHelp = document.getElementById('passwordConfirmationHelp');

    function validatePasswordComplexity() {
      const complexityRequirements = JSON.parse(password.dataset.complexity);
      const errors = [];

      if (password.value.length < 6) {
        errors.push('Password must be at least 6 characters long');
      }

      if ((password.value.match(/[A-Z]/g) || []).length < complexityRequirements.upper) {
        errors.push('Must contain at least one uppercase letter');
      }

      if ((password.value.match(/[a-z]/g) || []).length < complexityRequirements.lower) {
        errors.push('Must contain at least one lowercase letter');
      }

      if ((password.value.match(/[0-9]/g) || []).length < complexityRequirements.digit) {
        errors.push('Must contain at least one number');
      }

      if ((password.value.match(/[^A-Za-z0-9]/g) || []).length < complexityRequirements.symbol) {
        errors.push('Must contain at least one symbol');
      }

      if (errors.length > 0) {
        passwordFeedback.textContent = errors.join('. ');
        passwordFeedback.style.display = 'block';
        password.classList.add('is-invalid');
      } else {
        passwordFeedback.style.display = 'none';
        password.classList.remove('is-invalid');
        password.classList.add('is-valid');
      }
    }

    function validatePasswordMatch() {
      if (password.value !== passwordConfirmation.value) {
        passwordConfirmationHelp.textContent = 'Passwords do not match';
        passwordConfirmationHelp.style.color = 'red';
        passwordConfirmation.classList.add('is-invalid');
      } else {
        passwordConfirmationHelp.textContent = 'Passwords match';
        passwordConfirmationHelp.style.color = 'green';
        passwordConfirmation.classList.remove('is-invalid');
        passwordConfirmation.classList.add('is-valid');
      }
    }

    if (password && passwordConfirmation) {
      password.addEventListener('input', validatePasswordComplexity);
      password.addEventListener('input', validatePasswordMatch);
      passwordConfirmation.addEventListener('input', validatePasswordMatch);
    }
  });
</script>
