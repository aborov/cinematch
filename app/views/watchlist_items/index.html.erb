<h1 class="mb-4">My Watchlist</h1>

<div class="row">
  <div class="col-md-6">
    <h2>Unwatched</h2>
    <div data-controller="sortable" data-sortable-resource-url="/watchlist_items/" class="watchlist-container">
      <% @unwatched_items.each do |item| %>
        <div class="card mb-3 watchlist-item" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">
          <div class="row g-0">
            <div class="col-md-4">
              <%= image_tag item.content.poster_url, alt: item.content.title, class: 'img-fluid rounded-start' %>
            </div>
            <div class="col-md-8">
              <div class="card-body">
                <h5 class="card-title"><%= item.content.title %></h5>
                <p class="card-text"><small class="text-muted"><%= item.content.release_year %> | <%= item.content.content_type.capitalize %></small></p>
                <button class="btn btn-sm btn-success mark-watched" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">Mark as Watched</button>
                <button class="btn btn-sm btn-danger remove-item" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">Remove</button>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>

  <div class="col-md-6">
    <h2>Watched</h2>
    <div class="watchlist-container">
      <% @watched_items.each do |item| %>
        <div class="card mb-3 watchlist-item" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">
          <div class="row g-0">
            <div class="col-md-4">
              <%= image_tag item.content.poster_url, alt: item.content.title, class: 'img-fluid rounded-start' %>
            </div>
            <div class="col-md-8">
              <div class="card-body">
                <h5 class="card-title"><%= item.content.title %></h5>
                <p class="card-text"><small class="text-muted"><%= item.content.release_year %> | <%= item.content.content_type.capitalize %></small></p>
                <button class="btn btn-sm btn-warning mark-unwatched" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">Mark as Unwatched</button>
                <button class="btn btn-sm btn-danger remove-item" data-source-id="<%= item.source_id %>" data-content-type="<%= item.content_type %>">Remove</button>
              </div>
            </div>
          </div>
        </div>
      <% end %>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
  function handleWatchlistAction(action, sourceId, contentType, element) {
    let url, method;
    switch(action) {
      case 'markWatched':
        url = `/watchlist_items/${sourceId}/mark_watched?content_type=${contentType}`;
        method = 'PATCH';
        break;
      case 'markUnwatched':
        url = `/watchlist_items/${sourceId}/mark_unwatched?content_type=${contentType}`;
        method = 'PATCH';
        break;
      case 'removeItem':
        url = `/watchlist_items/${sourceId}?content_type=${contentType}`;
        method = 'DELETE';
        break;
    }
    fetch(url, {
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
      },
    })
    .then(response => {
      if (!response.ok) {
        throw new Error('Network response was not ok');
      }
      return response.json();
    })
    .then(data => {
      if (data.status === 'success') {
        updateUI(action, element);
        updateWatchlistNavbar();
      } else {
        console.error('Error:', data.message);
        alert(data.message); // Show an alert to the user
      }
    })
    .catch(error => {
      console.error('Error:', error);
    });
  }

  function updateUI(action, element) {
    const watchlistItem = element.closest('.watchlist-item');
    const contentId = element.dataset.contentId;
    switch(action) {
      case 'markWatched':
        watchlistItem.remove();
        document.querySelector('.col-md-6:nth-child(2) .watchlist-container').appendChild(watchlistItem);
        element.textContent = 'Mark as Unwatched';
        element.classList.remove('btn-success', 'mark-watched');
        element.classList.add('btn-warning', 'mark-unwatched');
        element.onclick = function() { handleWatchlistAction('markUnwatched', contentId, this); };
        break;
      case 'markUnwatched':
        watchlistItem.remove();
        document.querySelector('.col-md-6:nth-child(1) .watchlist-container').appendChild(watchlistItem);
        element.textContent = 'Mark as Watched';
        element.classList.remove('btn-warning', 'mark-unwatched');
        element.classList.add('btn-success', 'mark-watched');
        element.onclick = function() { handleWatchlistAction('markWatched', contentId, this); };
        break;
      case 'removeItem':
        watchlistItem.remove();
        break;
    }
  }

  document.querySelectorAll('.mark-watched, .mark-unwatched, .remove-item').forEach(button => {
    button.addEventListener('click', function(event) {
      event.preventDefault();
      const action = this.classList.contains('mark-watched') ? 'markWatched' :
                     this.classList.contains('mark-unwatched') ? 'markUnwatched' :
                     'removeItem';
      const sourceId = this.dataset.sourceId;
      const contentType = this.dataset.contentType;
      handleWatchlistAction(action, sourceId, contentType, this);
    });
  });
});

function updateWatchlistNavbar() {
  Promise.all([
    fetch('/watchlist_items/count').then(response => {
      if (!response.ok) throw new Error('Count fetch failed');
      return response.json();
    }),
    fetch('/watchlist_items/recent').then(response => {
      if (!response.ok) throw new Error('Recent fetch failed');
      return response.json();
    })
  ])
    .then(([countData, recentData]) => {
      const badge = document.querySelector('#watchlist-count');
      if (badge) {
        badge.textContent = countData.count;
        badge.style.display = countData.count > 0 ? 'inline-block' : 'none';
      }

      const dropdown = document.querySelector('#watchlist-dropdown');
      if (dropdown) {
        if (recentData.items && recentData.items.length > 0) {
          dropdown.innerHTML = recentData.items.map(item => `
            <li><a class="dropdown-item" href="/watchlist_items">
              <img src="${item.poster_url}" alt="${item.title}" class="me-2" style="width: 30px; height: 45px; object-fit: cover;">
              <span>${item.title} (${item.year})</span>
            </a></li>
          `).join('') + `
            <li><hr class="dropdown-divider"></li>
            <li><a class="dropdown-item text-primary" href="/watchlist_items">View All</a></li>
          `;
        } else {
          dropdown.innerHTML = '<li><span class="dropdown-item">No items in watchlist</span></li>';
        }
      }
      console.log('Watchlist navbar updated successfully');
      console.log('Count data:', countData);
      console.log('Recent data:', recentData);
    })
    .catch(error => {
      console.error('Error updating watchlist navbar:', error);
      // Optionally, you can update the UI to show an error message
    });
}

document.addEventListener('DOMContentLoaded', function() {
  updateWatchlistNavbar();
});
</script>
